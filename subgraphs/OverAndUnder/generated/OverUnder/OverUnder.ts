// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OverAndUnderBatchGameIds extends ethereum.Event {
  get params(): OverAndUnderBatchGameIds__Params {
    return new OverAndUnderBatchGameIds__Params(this);
  }
}

export class OverAndUnderBatchGameIds__Params {
  _event: OverAndUnderBatchGameIds;

  constructor(event: OverAndUnderBatchGameIds) {
    this._event = event;
  }

  get createdGameIds(): Array<BigInt> {
    return this._event.parameters[0].value.toBigIntArray();
  }
}

export class OverAndUnderBetLost extends ethereum.Event {
  get params(): OverAndUnderBetLost__Params {
    return new OverAndUnderBetLost__Params(this);
  }
}

export class OverAndUnderBetLost__Params {
  _event: OverAndUnderBetLost;

  constructor(event: OverAndUnderBetLost) {
    this._event = event;
  }

  get gameId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get better(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get predictAsOver(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class OverAndUnderBetPlaced extends ethereum.Event {
  get params(): OverAndUnderBetPlaced__Params {
    return new OverAndUnderBetPlaced__Params(this);
  }
}

export class OverAndUnderBetPlaced__Params {
  _event: OverAndUnderBetPlaced;

  constructor(event: OverAndUnderBetPlaced) {
    this._event = event;
  }

  get gameId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get better(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get predictPriceAsOver(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get betAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get multiplier(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get curUpdateMulAtAmountInWei(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class OverAndUnderFundsSentToTreasury extends ethereum.Event {
  get params(): OverAndUnderFundsSentToTreasury__Params {
    return new OverAndUnderFundsSentToTreasury__Params(this);
  }
}

export class OverAndUnderFundsSentToTreasury__Params {
  _event: OverAndUnderFundsSentToTreasury;

  constructor(event: OverAndUnderFundsSentToTreasury) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OverAndUnderGameCreated extends ethereum.Event {
  get params(): OverAndUnderGameCreated__Params {
    return new OverAndUnderGameCreated__Params(this);
  }
}

export class OverAndUnderGameCreated__Params {
  _event: OverAndUnderGameCreated;

  constructor(event: OverAndUnderGameCreated) {
    this._event = event;
  }

  get gameId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get stock(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get stockSymbol(): string {
    return this._event.parameters[2].value.toString();
  }

  get params(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class OverAndUnderGameDrawRevertBets extends ethereum.Event {
  get params(): OverAndUnderGameDrawRevertBets__Params {
    return new OverAndUnderGameDrawRevertBets__Params(this);
  }
}

export class OverAndUnderGameDrawRevertBets__Params {
  _event: OverAndUnderGameDrawRevertBets;

  constructor(event: OverAndUnderGameDrawRevertBets) {
    this._event = event;
  }

  get gameId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get better(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get predictPriceAsOver(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get betAmt(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OverAndUnderGameWinAmountSent extends ethereum.Event {
  get params(): OverAndUnderGameWinAmountSent__Params {
    return new OverAndUnderGameWinAmountSent__Params(this);
  }
}

export class OverAndUnderGameWinAmountSent__Params {
  _event: OverAndUnderGameWinAmountSent;

  constructor(event: OverAndUnderGameWinAmountSent) {
    this._event = event;
  }

  get gameId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get winner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get finalResult(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get multiplier(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get amountSent(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class OverAndUnderOddsUpdated extends ethereum.Event {
  get params(): OverAndUnderOddsUpdated__Params {
    return new OverAndUnderOddsUpdated__Params(this);
  }
}

export class OverAndUnderOddsUpdated__Params {
  _event: OverAndUnderOddsUpdated;

  constructor(event: OverAndUnderOddsUpdated) {
    this._event = event;
  }

  get gameId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newOddsStock0(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newOddsStock1(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OverAndUnderReceivedBNB extends ethereum.Event {
  get params(): OverAndUnderReceivedBNB__Params {
    return new OverAndUnderReceivedBNB__Params(this);
  }
}

export class OverAndUnderReceivedBNB__Params {
  _event: OverAndUnderReceivedBNB;

  constructor(event: OverAndUnderReceivedBNB) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OverAndUnderResultsUpdated extends ethereum.Event {
  get params(): OverAndUnderResultsUpdated__Params {
    return new OverAndUnderResultsUpdated__Params(this);
  }
}

export class OverAndUnderResultsUpdated__Params {
  _event: OverAndUnderResultsUpdated;

  constructor(event: OverAndUnderResultsUpdated) {
    this._event = event;
  }

  get gameId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get finalPrice(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get finalResult(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get isDraw(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class OverAndUnderRewardsDistributed extends ethereum.Event {
  get params(): OverAndUnderRewardsDistributed__Params {
    return new OverAndUnderRewardsDistributed__Params(this);
  }
}

export class OverAndUnderRewardsDistributed__Params {
  _event: OverAndUnderRewardsDistributed;

  constructor(event: OverAndUnderRewardsDistributed) {
    this._event = event;
  }

  get gameId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OverUnder__betsResult {
  value0: Address;
  value1: BigInt;
  value2: boolean;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: boolean;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: boolean,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    return map;
  }

  getBetter(): Address {
    return this.value0;
  }

  getBetAmount(): BigInt {
    return this.value1;
  }

  getPredictPriceAsOver(): boolean {
    return this.value2;
  }

  getTimestamp(): BigInt {
    return this.value3;
  }

  getWinAmount(): BigInt {
    return this.value4;
  }

  getMultiplier(): BigInt {
    return this.value5;
  }

  getWin(): boolean {
    return this.value6;
  }
}

export class OverUnder__getBetsOfUserInGameIdResultValue0Struct extends ethereum.Tuple {
  get better(): Address {
    return this[0].toAddress();
  }

  get betAmount(): BigInt {
    return this[1].toBigInt();
  }

  get predictPriceAsOver(): boolean {
    return this[2].toBoolean();
  }

  get timestamp(): BigInt {
    return this[3].toBigInt();
  }

  get winAmount(): BigInt {
    return this[4].toBigInt();
  }

  get multiplier(): BigInt {
    return this[5].toBigInt();
  }

  get win(): boolean {
    return this[6].toBoolean();
  }
}

export class OverUnder__getWinParametersResult {
  value0: Array<Address>;
  value1: Array<Array<BigInt>>;

  constructor(value0: Array<Address>, value1: Array<Array<BigInt>>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntMatrix(this.value1));
    return map;
  }

  getValue0(): Array<Address> {
    return this.value0;
  }

  getValue1(): Array<Array<BigInt>> {
    return this.value1;
  }
}

export class OverUnder__overAndUnderGamesResult {
  value0: Bytes;
  value1: string;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: boolean;
  value7: BigInt;
  value8: boolean;
  value9: boolean;
  value10: boolean;
  value11: BigInt;

  constructor(
    value0: Bytes,
    value1: string,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: boolean,
    value7: BigInt,
    value8: boolean,
    value9: boolean,
    value10: boolean,
    value11: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    map.set("value9", ethereum.Value.fromBoolean(this.value9));
    map.set("value10", ethereum.Value.fromBoolean(this.value10));
    map.set("value11", ethereum.Value.fromUnsignedBigInt(this.value11));
    return map;
  }

  getStockId(): Bytes {
    return this.value0;
  }

  getStockSymbol(): string {
    return this.value1;
  }

  getPredictionPrice(): BigInt {
    return this.value2;
  }

  getInitialMultiplierInWei(): BigInt {
    return this.value3;
  }

  getUpdateMulAfterAmountInWei(): BigInt {
    return this.value4;
  }

  getCurUpdateMulAtAmountInWei(): BigInt {
    return this.value5;
  }

  getIsGameDrawn(): boolean {
    return this.value6;
  }

  getFinalPrice(): BigInt {
    return this.value7;
  }

  getFinalResult(): boolean {
    return this.value8;
  }

  getResultsUpdatedAsDraw(): boolean {
    return this.value9;
  }

  getRewardsDistributed(): boolean {
    return this.value10;
  }

  getTotalBetsPooled(): BigInt {
    return this.value11;
  }
}

export class OverUnder extends ethereum.SmartContract {
  static bind(address: Address): OverUnder {
    return new OverUnder("OverUnder", address);
  }

  ADMIN_ROLE(): Bytes {
    let result = super.call("ADMIN_ROLE", "ADMIN_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ADMIN_ROLE", "ADMIN_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  OPERATOR_ROLE(): Bytes {
    let result = super.call("OPERATOR_ROLE", "OPERATOR_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_OPERATOR_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "OPERATOR_ROLE",
      "OPERATOR_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  bets(param0: BigInt, param1: Address, param2: BigInt): OverUnder__betsResult {
    let result = super.call(
      "bets",
      "bets(uint256,address,uint256):(address,uint256,bool,uint256,uint256,uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return new OverUnder__betsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBoolean(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBoolean()
    );
  }

  try_bets(
    param0: BigInt,
    param1: Address,
    param2: BigInt
  ): ethereum.CallResult<OverUnder__betsResult> {
    let result = super.tryCall(
      "bets",
      "bets(uint256,address,uint256):(address,uint256,bool,uint256,uint256,uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OverUnder__betsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBoolean(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBoolean()
      )
    );
  }

  betterGameIds(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "betterGameIds",
      "betterGameIds(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_betterGameIds(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "betterGameIds",
      "betterGameIds(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gameId(): BigInt {
    let result = super.call("gameId", "gameId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_gameId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("gameId", "gameId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBalance(): BigInt {
    let result = super.call("getBalance", "getBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getBalance", "getBalance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBetsOfUserInGameId(
    _gameId: BigInt,
    _better: Address
  ): Array<OverUnder__getBetsOfUserInGameIdResultValue0Struct> {
    let result = super.call(
      "getBetsOfUserInGameId",
      "getBetsOfUserInGameId(uint256,address):((address,uint256,bool,uint256,uint256,uint256,bool)[])",
      [
        ethereum.Value.fromUnsignedBigInt(_gameId),
        ethereum.Value.fromAddress(_better)
      ]
    );

    return result[0].toTupleArray<
      OverUnder__getBetsOfUserInGameIdResultValue0Struct
    >();
  }

  try_getBetsOfUserInGameId(
    _gameId: BigInt,
    _better: Address
  ): ethereum.CallResult<
    Array<OverUnder__getBetsOfUserInGameIdResultValue0Struct>
  > {
    let result = super.tryCall(
      "getBetsOfUserInGameId",
      "getBetsOfUserInGameId(uint256,address):((address,uint256,bool,uint256,uint256,uint256,bool)[])",
      [
        ethereum.Value.fromUnsignedBigInt(_gameId),
        ethereum.Value.fromAddress(_better)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        OverUnder__getBetsOfUserInGameIdResultValue0Struct
      >()
    );
  }

  getBetterGameIds(_better: Address): Array<BigInt> {
    let result = super.call(
      "getBetterGameIds",
      "getBetterGameIds(address):(uint256[])",
      [ethereum.Value.fromAddress(_better)]
    );

    return result[0].toBigIntArray();
  }

  try_getBetterGameIds(_better: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getBetterGameIds",
      "getBetterGameIds(address):(uint256[])",
      [ethereum.Value.fromAddress(_better)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getCurrentMulOfOverUnder(_gameId: BigInt, predictionAsOver: boolean): BigInt {
    let result = super.call(
      "getCurrentMulOfOverUnder",
      "getCurrentMulOfOverUnder(uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_gameId),
        ethereum.Value.fromBoolean(predictionAsOver)
      ]
    );

    return result[0].toBigInt();
  }

  try_getCurrentMulOfOverUnder(
    _gameId: BigInt,
    predictionAsOver: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentMulOfOverUnder",
      "getCurrentMulOfOverUnder(uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_gameId),
        ethereum.Value.fromBoolean(predictionAsOver)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getGameBetters(
    _gameId: BigInt,
    startIdx: BigInt,
    endIdx: BigInt
  ): Array<Address> {
    let result = super.call(
      "getGameBetters",
      "getGameBetters(uint256,uint256,uint256):(address[])",
      [
        ethereum.Value.fromUnsignedBigInt(_gameId),
        ethereum.Value.fromUnsignedBigInt(startIdx),
        ethereum.Value.fromUnsignedBigInt(endIdx)
      ]
    );

    return result[0].toAddressArray();
  }

  try_getGameBetters(
    _gameId: BigInt,
    startIdx: BigInt,
    endIdx: BigInt
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getGameBetters",
      "getGameBetters(uint256,uint256,uint256):(address[])",
      [
        ethereum.Value.fromUnsignedBigInt(_gameId),
        ethereum.Value.fromUnsignedBigInt(startIdx),
        ethereum.Value.fromUnsignedBigInt(endIdx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getGameStatus(_gameId: BigInt): i32 {
    let result = super.call("getGameStatus", "getGameStatus(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(_gameId)
    ]);

    return result[0].toI32();
  }

  try_getGameStatus(_gameId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getGameStatus",
      "getGameStatus(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(_gameId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getIndividualBetsInOverAndUnder(_gameId: BigInt): Array<BigInt> {
    let result = super.call(
      "getIndividualBetsInOverAndUnder",
      "getIndividualBetsInOverAndUnder(uint256):(uint256[2])",
      [ethereum.Value.fromUnsignedBigInt(_gameId)]
    );

    return result[0].toBigIntArray();
  }

  try_getIndividualBetsInOverAndUnder(
    _gameId: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getIndividualBetsInOverAndUnder",
      "getIndividualBetsInOverAndUnder(uint256):(uint256[2])",
      [ethereum.Value.fromUnsignedBigInt(_gameId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getMinMaxBetsOfGame(_gameId: BigInt): Array<BigInt> {
    let result = super.call(
      "getMinMaxBetsOfGame",
      "getMinMaxBetsOfGame(uint256):(uint256[2])",
      [ethereum.Value.fromUnsignedBigInt(_gameId)]
    );

    return result[0].toBigIntArray();
  }

  try_getMinMaxBetsOfGame(_gameId: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getMinMaxBetsOfGame",
      "getMinMaxBetsOfGame(uint256):(uint256[2])",
      [ethereum.Value.fromUnsignedBigInt(_gameId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getTimestampsOfGame(_gameId: BigInt): Array<BigInt> {
    let result = super.call(
      "getTimestampsOfGame",
      "getTimestampsOfGame(uint256):(uint256[3])",
      [ethereum.Value.fromUnsignedBigInt(_gameId)]
    );

    return result[0].toBigIntArray();
  }

  try_getTimestampsOfGame(_gameId: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getTimestampsOfGame",
      "getTimestampsOfGame(uint256):(uint256[3])",
      [ethereum.Value.fromUnsignedBigInt(_gameId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getTotalBettersInGame(_gameId: BigInt): BigInt {
    let result = super.call(
      "getTotalBettersInGame",
      "getTotalBettersInGame(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_gameId)]
    );

    return result[0].toBigInt();
  }

  try_getTotalBettersInGame(_gameId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalBettersInGame",
      "getTotalBettersInGame(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_gameId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalNumOfBetsOfBetter(_gameId: BigInt, _better: Address): BigInt {
    let result = super.call(
      "getTotalNumOfBetsOfBetter",
      "getTotalNumOfBetsOfBetter(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_gameId),
        ethereum.Value.fromAddress(_better)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTotalNumOfBetsOfBetter(
    _gameId: BigInt,
    _better: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalNumOfBetsOfBetter",
      "getTotalNumOfBetsOfBetter(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_gameId),
        ethereum.Value.fromAddress(_better)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getWinParameters(
    _gameId: BigInt,
    finalResult: boolean
  ): OverUnder__getWinParametersResult {
    let result = super.call(
      "getWinParameters",
      "getWinParameters(uint256,bool):(address[],uint256[][])",
      [
        ethereum.Value.fromUnsignedBigInt(_gameId),
        ethereum.Value.fromBoolean(finalResult)
      ]
    );

    return new OverUnder__getWinParametersResult(
      result[0].toAddressArray(),
      result[1].toBigIntMatrix()
    );
  }

  try_getWinParameters(
    _gameId: BigInt,
    finalResult: boolean
  ): ethereum.CallResult<OverUnder__getWinParametersResult> {
    let result = super.tryCall(
      "getWinParameters",
      "getWinParameters(uint256,bool):(address[],uint256[][])",
      [
        ethereum.Value.fromUnsignedBigInt(_gameId),
        ethereum.Value.fromBoolean(finalResult)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OverUnder__getWinParametersResult(
        value[0].toAddressArray(),
        value[1].toBigIntMatrix()
      )
    );
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isBetterInGame(_gameId: BigInt, _better: Address): boolean {
    let result = super.call(
      "isBetterInGame",
      "isBetterInGame(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_gameId),
        ethereum.Value.fromAddress(_better)
      ]
    );

    return result[0].toBoolean();
  }

  try_isBetterInGame(
    _gameId: BigInt,
    _better: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isBetterInGame",
      "isBetterInGame(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_gameId),
        ethereum.Value.fromAddress(_better)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  overAndUnderGames(param0: BigInt): OverUnder__overAndUnderGamesResult {
    let result = super.call(
      "overAndUnderGames",
      "overAndUnderGames(uint256):(bytes12,string,uint256,uint256,uint256,uint256,bool,uint256,bool,bool,bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new OverUnder__overAndUnderGamesResult(
      result[0].toBytes(),
      result[1].toString(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBoolean(),
      result[7].toBigInt(),
      result[8].toBoolean(),
      result[9].toBoolean(),
      result[10].toBoolean(),
      result[11].toBigInt()
    );
  }

  try_overAndUnderGames(
    param0: BigInt
  ): ethereum.CallResult<OverUnder__overAndUnderGamesResult> {
    let result = super.tryCall(
      "overAndUnderGames",
      "overAndUnderGames(uint256):(bytes12,string,uint256,uint256,uint256,uint256,bool,uint256,bool,bool,bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OverUnder__overAndUnderGamesResult(
        value[0].toBytes(),
        value[1].toString(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBoolean(),
        value[7].toBigInt(),
        value[8].toBoolean(),
        value[9].toBoolean(),
        value[10].toBoolean(),
        value[11].toBigInt()
      )
    );
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  treasuryContract(): Address {
    let result = super.call(
      "treasuryContract",
      "treasuryContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_treasuryContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "treasuryContract",
      "treasuryContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class CreateGameCall extends ethereum.Call {
  get inputs(): CreateGameCall__Inputs {
    return new CreateGameCall__Inputs(this);
  }

  get outputs(): CreateGameCall__Outputs {
    return new CreateGameCall__Outputs(this);
  }
}

export class CreateGameCall__Inputs {
  _call: CreateGameCall;

  constructor(call: CreateGameCall) {
    this._call = call;
  }

  get _stockId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _stockSymbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _predictionPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minBetAmountInWei(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _maxBetAmountInWei(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _initialMultiplierInWei(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _updateMulAfterAmountInWei(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _startGameTimeStamp(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _endGameTimestamp(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }
}

export class CreateGameCall__Outputs {
  _call: CreateGameCall;

  constructor(call: CreateGameCall) {
    this._call = call;
  }
}

export class CreateGameBatchCall extends ethereum.Call {
  get inputs(): CreateGameBatchCall__Inputs {
    return new CreateGameBatchCall__Inputs(this);
  }

  get outputs(): CreateGameBatchCall__Outputs {
    return new CreateGameBatchCall__Outputs(this);
  }
}

export class CreateGameBatchCall__Inputs {
  _call: CreateGameBatchCall;

  constructor(call: CreateGameBatchCall) {
    this._call = call;
  }

  get stockIds(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get stockSymbols(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }

  get predictionPrices(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get startTimestamps(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get endTimestamps(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get _minBetAmountInWei(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _maxBetAmountInWei(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _initialMultiplierInWei(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _updateMulAfterAmountInWei(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }
}

export class CreateGameBatchCall__Outputs {
  _call: CreateGameBatchCall;

  constructor(call: CreateGameBatchCall) {
    this._call = call;
  }
}

export class DistRewardParamsCall extends ethereum.Call {
  get inputs(): DistRewardParamsCall__Inputs {
    return new DistRewardParamsCall__Inputs(this);
  }

  get outputs(): DistRewardParamsCall__Outputs {
    return new DistRewardParamsCall__Outputs(this);
  }
}

export class DistRewardParamsCall__Inputs {
  _call: DistRewardParamsCall;

  constructor(call: DistRewardParamsCall) {
    this._call = call;
  }

  get _gameId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get winners(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get winningBetsIndexes(): Array<Array<BigInt>> {
    return this._call.inputValues[2].value.toBigIntMatrix();
  }
}

export class DistRewardParamsCall__Outputs {
  _call: DistRewardParamsCall;

  constructor(call: DistRewardParamsCall) {
    this._call = call;
  }
}

export class GetWinParametersCall extends ethereum.Call {
  get inputs(): GetWinParametersCall__Inputs {
    return new GetWinParametersCall__Inputs(this);
  }

  get outputs(): GetWinParametersCall__Outputs {
    return new GetWinParametersCall__Outputs(this);
  }
}

export class GetWinParametersCall__Inputs {
  _call: GetWinParametersCall;

  constructor(call: GetWinParametersCall) {
    this._call = call;
  }

  get _gameId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get finalResult(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class GetWinParametersCall__Outputs {
  _call: GetWinParametersCall;

  constructor(call: GetWinParametersCall) {
    this._call = call;
  }

  get value0(): Array<Address> {
    return this._call.outputValues[0].value.toAddressArray();
  }

  get value1(): Array<Array<BigInt>> {
    return this._call.outputValues[1].value.toBigIntMatrix();
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class GrantRoleToAddressCall extends ethereum.Call {
  get inputs(): GrantRoleToAddressCall__Inputs {
    return new GrantRoleToAddressCall__Inputs(this);
  }

  get outputs(): GrantRoleToAddressCall__Outputs {
    return new GrantRoleToAddressCall__Outputs(this);
  }
}

export class GrantRoleToAddressCall__Inputs {
  _call: GrantRoleToAddressCall;

  constructor(call: GrantRoleToAddressCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get role(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class GrantRoleToAddressCall__Outputs {
  _call: GrantRoleToAddressCall;

  constructor(call: GrantRoleToAddressCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get treasury(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get bnbUsdOracle(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PlaceBetCall extends ethereum.Call {
  get inputs(): PlaceBetCall__Inputs {
    return new PlaceBetCall__Inputs(this);
  }

  get outputs(): PlaceBetCall__Outputs {
    return new PlaceBetCall__Outputs(this);
  }
}

export class PlaceBetCall__Inputs {
  _call: PlaceBetCall;

  constructor(call: PlaceBetCall) {
    this._call = call;
  }

  get _gameId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _predictPriceAsOver(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class PlaceBetCall__Outputs {
  _call: PlaceBetCall;

  constructor(call: PlaceBetCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class RewardDistributionCall extends ethereum.Call {
  get inputs(): RewardDistributionCall__Inputs {
    return new RewardDistributionCall__Inputs(this);
  }

  get outputs(): RewardDistributionCall__Outputs {
    return new RewardDistributionCall__Outputs(this);
  }
}

export class RewardDistributionCall__Inputs {
  _call: RewardDistributionCall;

  constructor(call: RewardDistributionCall) {
    this._call = call;
  }

  get _gameId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RewardDistributionCall__Outputs {
  _call: RewardDistributionCall;

  constructor(call: RewardDistributionCall) {
    this._call = call;
  }
}

export class SetTreasuryCall extends ethereum.Call {
  get inputs(): SetTreasuryCall__Inputs {
    return new SetTreasuryCall__Inputs(this);
  }

  get outputs(): SetTreasuryCall__Outputs {
    return new SetTreasuryCall__Outputs(this);
  }
}

export class SetTreasuryCall__Inputs {
  _call: SetTreasuryCall;

  constructor(call: SetTreasuryCall) {
    this._call = call;
  }

  get _newTreasuryContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTreasuryCall__Outputs {
  _call: SetTreasuryCall;

  constructor(call: SetTreasuryCall) {
    this._call = call;
  }
}

export class SetUpRoleAdminCall extends ethereum.Call {
  get inputs(): SetUpRoleAdminCall__Inputs {
    return new SetUpRoleAdminCall__Inputs(this);
  }

  get outputs(): SetUpRoleAdminCall__Outputs {
    return new SetUpRoleAdminCall__Outputs(this);
  }
}

export class SetUpRoleAdminCall__Inputs {
  _call: SetUpRoleAdminCall;

  constructor(call: SetUpRoleAdminCall) {
    this._call = call;
  }

  get _role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _adminRole(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetUpRoleAdminCall__Outputs {
  _call: SetUpRoleAdminCall;

  constructor(call: SetUpRoleAdminCall) {
    this._call = call;
  }
}

export class TransferFundsToTreasuryCall extends ethereum.Call {
  get inputs(): TransferFundsToTreasuryCall__Inputs {
    return new TransferFundsToTreasuryCall__Inputs(this);
  }

  get outputs(): TransferFundsToTreasuryCall__Outputs {
    return new TransferFundsToTreasuryCall__Outputs(this);
  }
}

export class TransferFundsToTreasuryCall__Inputs {
  _call: TransferFundsToTreasuryCall;

  constructor(call: TransferFundsToTreasuryCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class TransferFundsToTreasuryCall__Outputs {
  _call: TransferFundsToTreasuryCall;

  constructor(call: TransferFundsToTreasuryCall) {
    this._call = call;
  }
}

export class UpdateResultsCall extends ethereum.Call {
  get inputs(): UpdateResultsCall__Inputs {
    return new UpdateResultsCall__Inputs(this);
  }

  get outputs(): UpdateResultsCall__Outputs {
    return new UpdateResultsCall__Outputs(this);
  }
}

export class UpdateResultsCall__Inputs {
  _call: UpdateResultsCall;

  constructor(call: UpdateResultsCall) {
    this._call = call;
  }

  get _gameId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _finalPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _finalResult(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get _isDraw(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class UpdateResultsCall__Outputs {
  _call: UpdateResultsCall;

  constructor(call: UpdateResultsCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
